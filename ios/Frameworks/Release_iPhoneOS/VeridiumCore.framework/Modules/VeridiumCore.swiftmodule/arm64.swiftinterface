// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name VeridiumCore
import Foundation
import Swift
@_exported import VeridiumCore
@objc public class OnlineLicenseChecker : ObjectiveC.NSObject {
  weak public var onlineLicensingProtocol: VeridiumCore.OnlineLicensingProtocol?
  @objc public var veridiumSDK: VeridiumCore.VeridiumSDKProtocol?
  public typealias ErrorBlock = (Swift.Error?) -> Swift.Void
  public typealias Completion = ([Swift.String : VeridiumCore.VeridiumLicenseStatus]?, Swift.Error?) -> Swift.Void
  public typealias SdkLoadCompletion = (Swift.String?, Swift.Error?) -> Swift.Void
  @objc public static func shared() -> VeridiumCore.OnlineLicenseChecker
  @objc public func getSDKLicense(initialClientCert: Swift.String, completion: @escaping VeridiumCore.OnlineLicenseChecker.SdkLoadCompletion)
  @objc public func validateBioLibs() -> [Swift.String : VeridiumCore.VeridiumLicenseStatus]
  @objc public func removeEnrollment()
  @objc public func onTransaction(bioLibName: Swift.String, operationType: VeridiumCore.OperationType, isSuccessfulTransaction: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VeridiumSDKProtocol {
  @objc func exporter(forMethod: Swift.String) -> VeridiumCore.VeridiumBioExporter?
}
extension VeridiumSDK : VeridiumCore.VeridiumSDKProtocol {
}
public protocol OnlineLicensingProtocol : ObjectiveC.NSObjectProtocol {
  func didUpdateOnlineLicense(status: [Swift.String : VeridiumCore.VeridiumLicenseStatus])
}
@objc public enum OperationType : Swift.Int {
  case Export
  case Enroll
  case Match
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum OnlineLicensingError : Swift.Error {
  case invalidClientCert
  case licensesNotAvailable
  case licenseNameNotAvailable
  case licenseExpirationDateNotAvailable
  case licenseParamNotAvailable(Swift.String)
  case invalidLicense(Swift.Error)
  case networkError(Swift.Error)
  case internalServerError(Swift.String)
  case licenseDisabledError
  case emptyAPIResponseDataError
}
extension OnlineLicensingError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension OnlineLicensingError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
}
