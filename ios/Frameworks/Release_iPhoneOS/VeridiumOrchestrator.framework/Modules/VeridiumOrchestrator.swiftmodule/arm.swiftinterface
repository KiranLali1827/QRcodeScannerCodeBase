// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name VeridiumOrchestrator
import AVFoundation
import CoreLocation
import Foundation
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import Veridium4FBiometrics
import Veridium4FUI
import VeridiumBOPS
import VeridiumBiometricsOnly
import VeridiumCore
import VeridiumDefaultVFaceUI
@_exported import VeridiumOrchestrator
import VeridiumQRReader
import VeridiumUBA
import VeridiumVFaceBiometrics
import otpadFramework
@objc public protocol VIDRevokeDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func wasPermanentlyRevoked(_ error: Foundation.NSError?)
  @objc optional func temporarlyBlocked(_ state: Swift.Bool)
}
@objc public class VIDConfiguration : ObjectiveC.NSObject {
  @objc public var license: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isDebugEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isWaitForLocationEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var locationAccuracy: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var locationWaitTime: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var displayUbaScore: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isAuthenticationContextEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var serverSettings: Swift.Dictionary<Swift.AnyHashable, Any> {
    @objc get
  }
  @objc public var progressSpinnerColor: UIKit.UIColor?
  @objc public var useUBA: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var supportEmailAddresses: [Swift.String] {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public class VeridiumRemoteConfigForceEnrollData : ObjectiveC.NSObject {
  public var lastUpdatedAppVersion: Swift.String
  public var isForceEnrolled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class BiometricsEnrollmentCoordinator : ObjectiveC.NSObject {
  public init(rootViewController: UIKit.UIViewController)
  public func start()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class VeridiumRegisterViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  public func setProfile(_ profile: VeridiumOrchestrator.VIDProfile?)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class VIDMobileSDK : ObjectiveC.NSObject {
  weak public var enrollDelegate: VeridiumOrchestrator.VIDEnrollDelegate?
  weak public var authenticationDelegate: VeridiumOrchestrator.VIDAuthenticationDelegate?
  public var unlockDelegate: VeridiumOrchestrator.VIDUnlockDelegate? {
    get
    set
  }
  weak public var profileDelegate: VeridiumOrchestrator.VIDProfileDelegate?
  weak public var revokeDelegate: VeridiumOrchestrator.VIDRevokeDelegate?
  weak public var sdkStatusDelegate: VeridiumOrchestrator.VIDMobileSDKStatusDelegate?
  weak public var pushDelegate: VeridiumOrchestrator.VIDPushDelegate?
  @objc public enum VIDState : Swift.Int {
    case serverPairing
    case accountRegistration
    case biometricEnrollment
    case accountAdvancedRegistration
    case accountRegisteredAndBiometricsSet
    case urlPairingToken
    case appLinkAuthentication
    case offline
    case initializeFailure
    case appUpdateRequired
    case reenrollRequired
    case unknown
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func shared() -> VeridiumOrchestrator.VIDMobileSDK
  @objc public func getConfiguration() -> VeridiumOrchestrator.VIDConfiguration
  @objc public func initialize(_ config: VeridiumOrchestrator.VIDConfiguration) -> VeridiumOrchestrator.VIDInitResponse
  @objc public func unlock()
  @objc public func appDidBecomeActive()
  @objc public func setRemoteNotificationsToken(pushTokenData: Foundation.Data?)
  @objc public func handlePush(_ notification: [Swift.AnyHashable : Any])
  @objc public func enroll(userEnrollmentToken: Swift.String?)
  @objc public func enroll(serverPairingBase64Token: Swift.String, userEnrollmentToken: Swift.String?)
  @objc public func authenticateWith(profile: VeridiumOrchestrator.VIDProfile, _ sessionId: Swift.String, _ extraValues: Foundation.NSDictionary? = nil)
  @objc public func authenticateWithQR(_ profile: VeridiumOrchestrator.VIDProfile, _ extraValues: Foundation.NSDictionary? = nil)
  @objc public func authenticateWithQR(_ extraValues: Foundation.NSDictionary? = nil)
  @objc public func authenticateOffline(_ profile: VeridiumOrchestrator.VIDProfile)
  @objc public func authenticateThroughProxyStart(profile: VeridiumOrchestrator.VIDProfile, completion: @escaping (Foundation.NSDictionary) -> Swift.Void)
  @objc public func authenticateThroughProxy(_ profile: VeridiumOrchestrator.VIDProfile, serverChallenge: Swift.String) -> Swift.String?
  @objc public func startInMotionSession(_ event: Swift.String)
  @objc public func recordInMotionEvent(_ event: Swift.String)
  @objc public func stopUBASession(withSuccess: Swift.Bool)
  @objc public func retrieveProfiles() -> [VeridiumOrchestrator.VIDProfile]
  @objc public func retrieveProfile(_ alias: Swift.String)
  @objc public func updateProfile(_ profile: VeridiumOrchestrator.VIDProfile)
  @objc public func deleteProfile(_ profile: VeridiumOrchestrator.VIDProfile)
  @objc public func exportLogs() -> Swift.String
  @objc public func wipeAccount(whenDone: VeridiumOrchestrator.voidBlock?)
  @objc public func getState() -> VeridiumOrchestrator.VIDMobileSDK.VIDState
  @objc public func getHelp() -> VeridiumOrchestrator.HelpContent
  @objc override dynamic public init()
  @objc deinit
}
@objc public class OfflineModeViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension OfflineModeViewController : VeridiumOrchestrator.VeridiumQRViewProtocol {
  public func onQrViewWillAppear(viewController: VeridiumOrchestrator.VeridiumQrReaderViewController)
  public func onInvalidQr()
  public func onOtpQR(uri: Swift.String, issuer: Swift.String?, accountName: Swift.String?)
  public func onPairingQR(token: Swift.String)
  public func onAuthenticationQR(sessionId: Swift.String, integrationId: Swift.String)
  public func onOfflineAuthenticationQR(profileExternalId: Swift.String, salt: Swift.String)
  public func onScanCancelled()
}
@objc public class ProcessingViewController : UIKit.UIViewController {
  public var titleText: Swift.String?
  public static func getCustomProcessingView(label: Swift.String) -> VeridiumOrchestrator.ProcessingViewController
  public static func getProcessingView() -> VeridiumOrchestrator.ProcessingViewController
  public static func reset()
  public func updateTitle(shouldUseDefaultLabel: Swift.Bool, label: Swift.String = "Processing ...")
  public func reset()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  public func show(didShow: VeridiumOrchestrator.voidBlock?)
  public func show(title: Swift.String?, didShow: VeridiumOrchestrator.voidBlock?)
  @objc override dynamic public func dismiss(animated: Swift.Bool, completion: VeridiumOrchestrator.voidBlock?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (VeridiumOrchestrator.Reachability) -> ()
  public typealias NetworkUnreachable = (VeridiumOrchestrator.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VeridiumOrchestrator.Reachability.NetworkStatus, b: VeridiumOrchestrator.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: VeridiumOrchestrator.Reachability.Connection, b: VeridiumOrchestrator.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: VeridiumOrchestrator.Reachability.NetworkReachable?
  public var whenUnreachable: VeridiumOrchestrator.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: VeridiumOrchestrator.Reachability.Connection {
    get
  }
  public var connection: VeridiumOrchestrator.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public class VIDProfile : ObjectiveC.NSObject {
  public static let colors: [UIKit.UIColor]
  public var id: Swift.String
  public var profileExternalId: Swift.String
  public var integrationExternalId: Swift.String
  public var biometricMethods: [Swift.String]
  public var requiredBiometricMethods: [Swift.String]
  public var availableBiometricMethods: [Swift.String]
  public var externalValues: Swift.Dictionary<Swift.String, Swift.String>
  public var status: Swift.String
  public var email: Swift.String?
  public var alias: Swift.String?
  public var profileColor: UIKit.UIColor?
  public var profileThumbnail: UIKit.UIImage?
  public var isTouchlessIDLivenessEnabled: Swift.Bool
  public var isVFaceIDLivenessEnabled: Swift.Bool
  public var touchlessIDHandSettings: VeridiumOrchestrator.AuthHand
  public init?(byDictionary dict: [Swift.AnyHashable : Any]) throws
  public init?(_ toCopy: VeridiumOrchestrator.VIDProfile?)
  public static func areEqual(lhs: VeridiumOrchestrator.VIDProfile, rhs: VeridiumOrchestrator.VIDProfile) -> Swift.Bool
  public func isAdmin() -> Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol VIDAuthenticationDelegate : ObjectiveC.NSObjectProtocol {
  func didFinishAuthentication(response: VeridiumOrchestrator.VIDAuthResponse)
  func didFinishAuthenticationServerChallenge(signedResponse: VeridiumOrchestrator.VIDAuthResponse)
  func didCancelAuthentication()
  func didCancelAuthenticationServerChallenge(signedResponse: VeridiumOrchestrator.VIDAuthResponse)
  func didFailAuthentication(error: VeridiumOrchestrator.VIDError)
  func didFailAuthenticationServerChallenge(signedResponse: VeridiumOrchestrator.VIDAuthResponse, error: VeridiumOrchestrator.VIDError)
}
@objc public class VeridiumPushManager : ObjectiveC.NSObject, VeridiumCore.VeridiumPushHandlerProtocol, UIKit.UIApplicationDelegate {
  public static let shared: VeridiumOrchestrator.VeridiumPushManager
  public var isAuthInProgress: Swift.Bool
  public func setRemoteNotificationsToken(pushTokenData: Foundation.Data?)
  @objc public func handlePush(_ pushData: [Swift.String : Any]!, isAPNS: Swift.Bool)
  public func consumePendigPushes()
  @objc deinit
}
@objc public class VersionInformation : ObjectiveC.NSObject {
  public var sdkVersion: Swift.String
  public var fourFVersion: Swift.String
  public var contact: Swift.String
  public var serverName: Swift.String
  public var serverVersion: Swift.String
  public var serverFourFVersion: Swift.String
  public var authenticationType: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension VeridiumBOPSAccount {
  @objc override dynamic open var enrolledHand: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic open var privateProfilesCount: Swift.Int {
    @objc get
  }
  @objc override dynamic open func authenticate(forProfileId profileId: Swift.String, onActiveSessionId sessionId: Swift.String, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func authenticate(forProfile profile: VeridiumCore.VeridiumProfileData, andRegisterForSessionId sessionId: Swift.String, extraValues: [Swift.AnyHashable : Any]? = nil, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func cancelSessionId(_ sessionId: Swift.String, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func authenticate(forProfileId profileId: Swift.String, serverChallenge: Swift.String, completion: @escaping VeridiumOrchestrator.authBlockCore) -> Swift.String?
  @objc override dynamic open func authenticateAndRemove(forProfile profile: VeridiumCore.VeridiumProfileData, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func authenticateAndRemoveDevice(completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func authenticateForUpdate(forProfile profile: VeridiumCore.VeridiumProfileData, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func authenticateOffline(forProfile profile: VeridiumCore.VeridiumProfileData, completion: @escaping VeridiumOrchestrator.authBlockCore)
  @objc override dynamic open func fetchLicenseAndValidate(withForce force: Swift.Bool, completion: @escaping (Swift.Error?) -> Swift.Void)
}
@objc public class HelpContent : ObjectiveC.NSObject {
  @objc public func biometricHints() -> [Swift.String]
  @objc public func disclaimers() -> [VeridiumOrchestrator.Disclaimer]
  @objc public func versionInfo(completion: @escaping (VeridiumOrchestrator.VersionInformation) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class VIDInitResponse : ObjectiveC.NSObject {
  @objc public enum LicenseStatus : Swift.Int {
    case Ok
    case GracePeriod
    case Expired
    case Invalid
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var licenseStatus: VeridiumOrchestrator.VIDInitResponse.LicenseStatus
  @objc public var error: Swift.Error?
  @objc deinit
}
@objc public class VIDSettings : ObjectiveC.NSObject {
  public var serverSettings: Swift.Dictionary<Swift.AnyHashable, Any> {
    get
    }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol BaseViewProtocol {
}
@objc public class VIDError : Foundation.NSError {
  @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
extension UIButton {
  @objc @IBInspectable dynamic public var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable dynamic public var borderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable dynamic public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
}
extension UIViewController {
  public func presentVeridiumAlert(_ alert: UIKit.UIViewController, animated: Swift.Bool)
  public func presentVeridiumDismissingAlert(_ alert: UIKit.UIViewController, animated: Swift.Bool, dismissDeadline: Dispatch.DispatchTime, afterDismiss: VeridiumOrchestrator.voidBlock?)
  public func addNavBarImage(image: Swift.String)
  public func addShaddow(view: UIKit.UIView)
  public func addVeridiumFontForNavBar()
  public func addVeridiumFontForNavBarItem(label: UIKit.UILabel)
  public func enableNaviationSwipe(flag: Swift.Bool)
  public func createBackButtonWithName() -> UIKit.UIButton
}
@objc public class VeridiumQrReaderViewController : UIKit.UIViewController, VeridiumQRReader.VeridiumQRUIDelegateProtocol {
  public var delegate: VeridiumOrchestrator.VeridiumQRViewProtocol!
  public var descriptionText: Swift.String!
  public var helpText: Swift.String?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc public func previewView() -> UIKit.UIView
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class Disclaimer : ObjectiveC.NSObject {
  public var server: Swift.String
  public var integrationName: Swift.String
  public var integrationExternalId: Swift.String
  public var content: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class OtpCodeViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class VIDSetupService : VeridiumOrchestrator.VeridiumQRViewProtocol {
  public static let kOtpIntegrationExternalId: Swift.String
  public init()
  public static var bopsPairings: [Swift.String : VeridiumBOPS.VeridiumBOPSPairingData] {
    get
    set
  }
  public static func firstPairing() -> VeridiumBOPS.VeridiumBOPSPairingData?
  public var defaultAccountService: VeridiumCore.VeridiumAccountService? {
    get
  }
  public func onQrViewWillAppear(viewController: VeridiumOrchestrator.VeridiumQrReaderViewController)
  public func onPairingQR(token: Swift.String)
  public func onOtpQR(uri: Swift.String, issuer: Swift.String?, accountName: Swift.String?)
  public func onAuthenticationQR(sessionId: Swift.String, integrationId: Swift.String)
  public func onOfflineAuthenticationQR(profileExternalId: Swift.String, salt: Swift.String)
  public func onInvalidQr()
  public func onScanCancelled()
  public func isADIntegration(integrationExtID: Swift.String) -> Swift.Bool
  public func isOTPIntegration(integrationExtID: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc public class VeridiumTXConfirmationViewController : UIKit.UIViewController {
  public var onOK: VeridiumOrchestrator.voidBlock?
  public var onCancel: VeridiumOrchestrator.voidBlock?
  public static func initiate(withMessage: Swift.String) -> VeridiumOrchestrator.VeridiumTXConfirmationViewController
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol VIDMobileSDKStatusDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didStartLongProcess(status: VeridiumOrchestrator.SDKStatus, processDescription: Swift.String)
  @objc optional func didFinishLongProcess(status: VeridiumOrchestrator.SDKStatus)
}
@objc public enum SDKStatus : Swift.Int {
  case PAIRING = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class BasicDialogViewController : UIKit.UIViewController {
  public var titleText: Swift.String
  @objc override dynamic public func viewDidLoad()
  public static func qrErrorAlert(titleText: Swift.String, descriptionText: Swift.String, onOk: @escaping VeridiumOrchestrator.voidBlock) -> VeridiumOrchestrator.BasicDialogViewController
  public static func getInvalidQRAlert(onOk: VeridiumOrchestrator.voidBlock?) -> VeridiumOrchestrator.BasicDialogViewController
  public static func getCustomErrorAlert(titleText: Swift.String, descriptionText: Swift.String, onOk: @escaping VeridiumOrchestrator.voidBlock) -> VeridiumOrchestrator.BasicDialogViewController
  public static func getByErrorCode(errorCode: Swift.Int, onOk: @escaping VeridiumOrchestrator.voidBlock) -> VeridiumOrchestrator.BasicDialogViewController
  public static func getBOPSErrorCode(errorCode: Swift.Int, onOk: @escaping VeridiumOrchestrator.voidBlock) -> VeridiumOrchestrator.BasicDialogViewController
  public static func getByError(error: Swift.Error, continueButtonText: Swift.String = "Ok", onOk: @escaping VeridiumOrchestrator.voidBlock) -> VeridiumOrchestrator.BasicDialogViewController
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VeridiumQRViewProtocol : VeridiumOrchestrator.BaseViewProtocol {
  func onScanCancelled()
  func onPairingQR(token: Swift.String)
  func onAuthenticationQR(sessionId: Swift.String, integrationId: Swift.String)
  func onOfflineAuthenticationQR(profileExternalId: Swift.String, salt: Swift.String)
  func onOtpQR(uri: Swift.String, issuer: Swift.String?, accountName: Swift.String?)
  func onInvalidQr()
  func onQrViewWillAppear(viewController: VeridiumOrchestrator.VeridiumQrReaderViewController)
}
public protocol VIDEnrollDelegate : ObjectiveC.NSObjectProtocol {
  func didFinishEnrollment(response: VeridiumOrchestrator.VIDEnrollResponse)
  func didCancelEnrollment()
  func didFailEnrollment(error: VeridiumOrchestrator.VIDError)
}
@objc public class BasicAlertViewController : UIKit.UIViewController {
  public var ubaInfo: VeridiumOrchestrator.VIDAuthResponse.VIDinMotionOutput?
  public enum AlertType {
    case EnrollmentComplete, EnrollmentError, AuthencationSuccessful, AuthenticationFailed
    public static func == (a: VeridiumOrchestrator.BasicAlertViewController.AlertType, b: VeridiumOrchestrator.BasicAlertViewController.AlertType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func authenticationAlert(_forStatus result: VeridiumCore.VeridiumAggregatedAuthResult) -> VeridiumOrchestrator.BasicAlertViewController?
  public static func authenticationAlert(_forStatus result: VeridiumOrchestrator.VIDAuthResponse) -> VeridiumOrchestrator.BasicAlertViewController?
  public static func getAlert(type: VeridiumOrchestrator.BasicAlertViewController.AlertType, additionalInfo: Swift.String = "", isDismissableByUser: Swift.Bool = false) -> VeridiumOrchestrator.BasicAlertViewController?
  public static func getCustomAlert(image: UIKit.UIImage?, alertTitle: Swift.String, additionalInfo: Swift.String?, isDismissableByUser: Swift.Bool = false) -> VeridiumOrchestrator.BasicAlertViewController
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func presentInTopmost()
  public func presentInTopmostNonDismissable()
  public func presentInTopmostWithDismissBlock(dismissBlock: VeridiumOrchestrator.voidBlock?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol VIDPushDelegate : ObjectiveC.NSObjectProtocol {
  @objc func pushesPending()
}
public class VIDAuthResponse {
  public class VIDinMotionOutput {
    public var processed: Swift.Bool {
      get
      }
    public var verified: Swift.Bool {
      get
      }
    public init(processed: Swift.Bool, verified: Swift.Bool)
    @objc deinit
  }
  public enum AuthenticationStatus {
    case AUTHENTICATED
    case AUTHENTICATED_BY_ADMIN
    case TIMEOUT
    case FAILED
    case CANCELED
    case NONE
    public static func == (a: VeridiumOrchestrator.VIDAuthResponse.AuthenticationStatus, b: VeridiumOrchestrator.VIDAuthResponse.AuthenticationStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var status: VeridiumOrchestrator.VIDAuthResponse.AuthenticationStatus {
    get
    }
  public var authenticationCode: Swift.String? {
    get
    }
  public var vidSessionId: Swift.String {
    get
    }
  public var ubaOutput: VeridiumOrchestrator.VIDAuthResponse.VIDinMotionOutput? {
    get
    }
  public var didSDKShowAlert: Swift.Bool
  @objc deinit
}
public class VIDEnrollResponse {
  public var profileId: Swift.String {
    get
    }
  public var deviceStatus: Swift.String {
    get
    }
  @objc deinit
}
@objc public class VeridiumUIAlertController : UIKit.UIViewController {
  public static func initiate(withTitle: Swift.String?, message: Swift.String?, okButton: (Swift.String, VeridiumOrchestrator.voidBlock?), cancelButton: (Swift.String?, VeridiumOrchestrator.voidBlock?)) -> VeridiumOrchestrator.VeridiumUIAlertController
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol VIDProfileDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didFinishRetrievingProfiles(_: [VeridiumOrchestrator.VIDProfile])
  @objc optional func didFinishRetrievingProfile(_: VeridiumOrchestrator.VIDProfile)
  @objc optional func didFailRetrieveProfiles(error: VeridiumOrchestrator.VIDError)
  @objc optional func didDeleteProfile(_: VeridiumOrchestrator.VIDProfile)
  @objc optional func didFailDeleteProfile(error: VeridiumOrchestrator.VIDError)
  @objc optional func didCancelDeleteProfile()
  @objc optional func didFinishUpdateProfile(_: VeridiumOrchestrator.VIDProfile)
  @objc optional func didFailUpdateProfile(error: VeridiumOrchestrator.VIDError)
  @objc optional func didCancelUpdateProfile()
}
public func errorTitle(error: Swift.Error) -> Swift.String
public func errorMessage(error: Swift.Error) -> Swift.String
public let kSegueVeridiumIdSetup: Swift.String
public var kVeridiumProfileImageViewTag: Swift.Int {
  get
}
public var sdkSetupFailed: Swift.Error?
public typealias voidBlock = () -> Swift.Void
public typealias errorBlock = (Swift.Error?) -> Swift.Void
public var kNotificationRefreshProfiles: Swift.String
public var isForceReenrollNeeded: Swift.Bool
public var kVeridiumLocalAuthenticationErrorDomain: Swift.String {
  get
}
public enum AppTarget {
  case BANKING
  case AUTHENTICATOR
  public static func == (a: VeridiumOrchestrator.AppTarget, b: VeridiumOrchestrator.AppTarget) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public let appTarget: VeridiumOrchestrator.AppTarget
@objc public class AggregatedAuthenticationResult : VeridiumCore.VeridiumAggregatedAuthResult {
  @objc override dynamic public init(overallResult: VeridiumCore.VeridiumAuthResult)
  @objc override dynamic public init()
  @objc deinit
}
public typealias authBlockCore = (VeridiumCore.VeridiumAggregatedAuthResult, Swift.Error?) -> Swift.Void
public enum UIActionRowType : Swift.Int {
  case edit
  case delete
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum EnrollHand : ObjectiveC.NSInteger {
  case left
  case right
  case either
  case both
  public init(hand: Swift.String)
  public typealias RawValue = ObjectiveC.NSInteger
  public init?(rawValue: ObjectiveC.NSInteger)
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
public enum AuthHand : ObjectiveC.NSInteger {
  case left
  case right
  public typealias RawValue = ObjectiveC.NSInteger
  public init?(rawValue: ObjectiveC.NSInteger)
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
public var forceReenrollData: VeridiumOrchestrator.VeridiumRemoteConfigForceEnrollData? {
  get
  set
}
public var areBiometricsEnrolled: Swift.Bool {
  get
  set
}
extension String {
  public func boolValue() -> Swift.Bool
  public var length: Swift.Int {
    get
  }
  public subscript(i: Swift.Int) -> Swift.String {
    get
  }
  public func substring(fromIndex: Swift.Int) -> Swift.String
  public func substring(toIndex: Swift.Int) -> Swift.String
  public subscript(r: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public var toNSString: Foundation.NSString {
    get
  }
}
extension Data {
  public var toNSData: Foundation.NSData {
    get
  }
}
extension Dictionary {
  public var toNSDictoinary: Foundation.NSDictionary {
    get
  }
}
extension Error {
  public var toNSError: Foundation.NSError {
    get
  }
}
extension Array where Element : Swift.Equatable {
  mutating public func remove(object: Element)
  public var toNSArray: Foundation.NSArray {
    get
  }
}
extension DispatchQueue {
  public class func once(token: Swift.String, block: () -> Swift.Void)
}
public func showAuthenticatedByAdminAlert(onOK: @escaping VeridiumOrchestrator.voidBlock)
extension VeridiumProfileData {
  public static var _storeMultiton: [Swift.String : VeridiumCore.VeridiumKeychainKeyValueStore]
  public var profileImage: UIKit.UIImage? {
    get
    set
  }
  public var alias: Swift.String? {
    get
    set
  }
  public var integration: VeridiumBOPS.VeridiumBOPSIntegrationDefinitionData? {
    get
    set
  }
  public func getDefaultAlias() -> Swift.String
  public func isAdmin() -> Swift.Bool
  public func updateLocalsIfRequired()
  public func updateProfile(alias: Swift.String?, image: UIKit.UIImage?, integration: VeridiumBOPS.VeridiumBOPSIntegrationDefinitionData?, authenticationHand: VeridiumOrchestrator.AuthHand?)
  public func updateSettings(newProfile: VeridiumOrchestrator.VIDProfile, completion: @escaping (Swift.Error?) -> ())
  public var useLiveness: Swift.Bool {
    get
    set
  }
  public var useVFaceLiveness: Swift.Bool {
    get
    set
  }
  public var authenticationHand: VeridiumOrchestrator.AuthHand? {
    get
    set
  }
  public var isActive: Swift.Bool {
    get
  }
  public var usersSelectedPhotoColor: Swift.Int {
    get
    set
  }
}
public protocol VIDUnlockDelegate : ObjectiveC.NSObjectProtocol {
  func didStartUnlock()
  func didFinishUnlock()
  func didFailUnlock(error: VeridiumOrchestrator.VIDError)
}
public enum ReachabilityStatus : Swift.Equatable {
  case offline
  case online
  case unknown
  public static func == (a: VeridiumOrchestrator.ReachabilityStatus, b: VeridiumOrchestrator.ReachabilityStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class Reach {
  public init()
  public func connectionStatus() -> VeridiumOrchestrator.ReachabilityStatus
  public func monitorReachabilityChanges()
  public func connectionNeeded() -> Swift.Bool
  @objc deinit
}
extension ReachabilityStatus {
  public init(reachabilityFlags flags: SystemConfiguration.SCNetworkReachabilityFlags)
}
open class AbstractPresenter<GenericView> : ObjectiveC.NSObject where GenericView : VeridiumOrchestrator.BaseViewProtocol {
  public var genericView: GenericView!
  @objc override dynamic public init()
  public func setView(view: GenericView)
  @objc deinit
}
extension VeridiumOrchestrator.EnrollHand : Swift.Equatable {}
extension VeridiumOrchestrator.EnrollHand : Swift.Hashable {}
extension VeridiumOrchestrator.EnrollHand : Swift.RawRepresentable {}
extension VeridiumOrchestrator.VeridiumRegisterViewController : VeridiumOrchestrator.BaseViewProtocol {}
extension VeridiumOrchestrator.VIDMobileSDK.VIDState : Swift.Equatable {}
extension VeridiumOrchestrator.VIDMobileSDK.VIDState : Swift.Hashable {}
extension VeridiumOrchestrator.VIDMobileSDK.VIDState : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension VeridiumOrchestrator.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension VeridiumOrchestrator.Reachability.NetworkStatus : Swift.Hashable {}
extension VeridiumOrchestrator.Reachability.Connection : Swift.Equatable {}
extension VeridiumOrchestrator.Reachability.Connection : Swift.Hashable {}
extension VeridiumOrchestrator.VIDInitResponse.LicenseStatus : Swift.Equatable {}
extension VeridiumOrchestrator.VIDInitResponse.LicenseStatus : Swift.Hashable {}
extension VeridiumOrchestrator.VIDInitResponse.LicenseStatus : Swift.RawRepresentable {}
extension VeridiumOrchestrator.SDKStatus : Swift.Hashable {}
extension VeridiumOrchestrator.SDKStatus : Swift.RawRepresentable {}
extension VeridiumOrchestrator.BasicAlertViewController.AlertType : Swift.Equatable {}
extension VeridiumOrchestrator.BasicAlertViewController.AlertType : Swift.Hashable {}
extension VeridiumOrchestrator.VIDAuthResponse.AuthenticationStatus : Swift.Hashable {}
extension VeridiumOrchestrator.AppTarget : Swift.Equatable {}
extension VeridiumOrchestrator.AppTarget : Swift.Hashable {}
extension VeridiumOrchestrator.UIActionRowType : Swift.Equatable {}
extension VeridiumOrchestrator.UIActionRowType : Swift.Hashable {}
extension VeridiumOrchestrator.UIActionRowType : Swift.RawRepresentable {}
extension VeridiumOrchestrator.AuthHand : Swift.Hashable {}
extension VeridiumOrchestrator.AuthHand : Swift.RawRepresentable {}
extension VeridiumOrchestrator.ReachabilityStatus : Swift.Hashable {}
